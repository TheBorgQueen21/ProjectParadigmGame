### File Owner: Anika
### Date: July 7, 2020
### File: Second Mini Game (space invader)

#Icons made by <a href="https://www.flaticon.com/authors/freepik" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon"> www.flaticon.com</a>

#initialize the pygame
import pygame
import random
pygame.init ()

#create the screen
screen = pygame.display.set_mode((800, 600))

# background
#background = pygame.image.load('Yellow_Background.png')
background = pygame.image.load("Yellow_Background.png").convert()

#Title and Icon
pygame.display.set_caption("Project Paradigm")
icon = pygame.image.load('flower (1).png')
pygame.display.set_icon(icon)

#Player
playerImg = pygame.image.load('heart.png')
playerX = 370
playerY = 480
playerX_change = 0

#Enemy
EnemyImg = pygame.image.load('broken-heart.png')
EnemyX = random.randint(0, 800)
EnemyY = 50 #change to random, between 50 and 150
EnemyX_change  = 0.3
EnemyY_change = 40

#Bullet
bulletImg = pygame.image.load('up-arrow.png')
bulletX = 0
bulletY = 480 #change to random, between 50 and 150
bulletX_change  = 0.3
bulletY_change = 40
bullet_state = "ready" #ready state means you can't see the bullet on the screen, fire means bullet is moving

def player(x, y):
    screen.blit(playerImg, (x, y)) #draws the player on the screen

def Enemy(x, y):
    screen.blit(EnemyImg, (x, y))

def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bulletImg, (x + 16, y + 10)

#Game Loop (allows user to exit)
running = True
while running: #anything you want to appear continuously must go inside this while loop
    screen.fill((150, 50, 250)) #rgb value
    #background image
    screen.blit(background, (0, 0))
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        #if keystroke pressed, check if right or left
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                playerX_change = -0.3
            if event.key == pygame.K_RIGHT:
                playerX_change = 0.3
            if event.key == pygame.K_SPACE:
                fire_bullet (playerX, bulletY)
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                playerX_change = 0
    #checking player's sprite boundries
    playerX += playerX_change
    if playerX <= 0:
        playerX = 0
    elif playerX >= 736: #subtract the size of sprite from the side (800 pixels)
        playerX = 736

    #checking enemy movement
    EnemyX += EnemyX_change
    if EnemyX <= 0:
        EnemyX_change = 0.3
        EnemyY += EnemyY_change
    elif EnemyX >= 736:
        EnemyX_change = -0.3
        EnemyY += EnemyY_change

    #bullet movement
    if bullet_state is "fire":
        fire_bullet (playerX, bulletY)
        bulletY -= bulletY_change


    player(playerX, playerY) #must be after fill method bc it wont be overwritten by the background
    Enemy(EnemyX, EnemyY)
    pygame.display.update()
